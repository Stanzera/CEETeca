/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Telas;

import DAO.NewHibernateUtil;
import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.Calendar;
import java.util.List;
import javax.persistence.Query;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Session;

/**
 *
 * @author Aluno
 */
public class TelaPrincipal extends javax.swing.JFrame {

    DecimalFormat formatador = new DecimalFormat("00");

    /**
     * Creates new form TelaPrincipal
     */
    public TelaPrincipal() {
        initComponents();

        /* this.setExtendedState(this.MAXIMIZED_BOTH);
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        //this.setMinimumSize(d);
        //int larg = d.width;
        int alt = d.height;

        alt = (int) (alt * 0.94);
        d.height = alt;
        //setSize(larg, (int)(alt*0.94));
        setSize(d);
        
         */
        Timer time = new Timer(500, ativar);
        time.start();

        ImageIcon icone = new ImageIcon(getClass().getResource("/images/ceetecaicon16x16.png"));
        this.setIconImage(icone.getImage());

        Session sessao = NewHibernateUtil.getSessionFactory().openSession();
        sessao.beginTransaction();
        //Chama a view
        String select = "select distinct pessoa.nomePessoa as Nome, pessoa.matriculaPessoa as Matricula_N_Funcional, livro.tituloLivro as Titulo_Livro,\n"
                + "emprestimo.idEmprestimo as N_Chamada, emprestimo.dtDevolucaoEmprestimo as Limite_Data,\n"
                + "emprestimo.observacaoEmprestimo as Situacao\n"
                + "from pessoa\n"
                + "inner join emprestimo on pessoa.idPessoa = emprestimo.idEmprestimo\n"
                + "inner join livro_has_emprestimo on emprestimo_idEmprestimo = emprestimo.idEmprestimo\n"
                + "inner join exemplar ON livro_has_emprestimo.exemplar_idExemplar = exemplar.idExemplar\n"
                + "inner join livro ON exemplar.livro_idLivro = livro.idLivro";

        Query q = sessao.createSQLQuery(select).addEntity(viewmodel.viewTabelaTelaPrincipal.class);
        //pega o resultado da query e retorna uma lista
        List<viewmodel.viewTabelaTelaPrincipal> registrosTelaPrincipal = q.getResultList();
        sessao.getTransaction().commit();
        sessao.close();

        //pega o modelo da tabela
        DefaultTableModel model = (DefaultTableModel) tabelaTelaPrincipal.getModel();

        for (int i = 0; i < registrosTelaPrincipal.size(); i++) {
            //Pega o dado do registro usando i
            viewmodel.viewTabelaTelaPrincipal registro = registrosTelaPrincipal.get(i);
            //adiciona os valores na linha
            Object[] row = {
                registro.getNome(),
                registro.getMatricula(),
                registro.getTituloLivro(),
                registro.getnChamada(),
                registro.getDataLimite(),
                registro.getSituacao()
            };
            //adiciona a linha no modelo da tabela
            model.addRow(row);
        }
        //adiciona o modelo novamente na tabela
        tabelaTelaPrincipal.setModel(model);

        //Atualiza a parte grafica da tabela mostrando os novos valores
        tabelaTelaPrincipal.setVisible(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaTelaPrincipal = new javax.swing.JTable();
        lbData = new javax.swing.JLabel();
        lbHora = new javax.swing.JLabel();
        lbCumprimento = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        gerenciarTelaPrincipal = new javax.swing.JMenu();
        usuarioTelaPrincipal = new javax.swing.JMenu();
        gerAlunoTelaPrincipal = new javax.swing.JMenuItem();
        gerBibliotecarioTelaPrincipal = new javax.swing.JMenuItem();
        gerProfessorTelaPrincipal = new javax.swing.JMenuItem();
        gerEmprestimoTelaPrincipal = new javax.swing.JMenuItem();
        gerLivroTelaPrincipal = new javax.swing.JMenuItem();
        ajudaTelaPrincipal = new javax.swing.JMenu();
        manualTelaPrincipal = new javax.swing.JMenuItem();
        sobreTelaPrincipal = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CEETECA");

        tabelaTelaPrincipal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Matrícula/N° Funcional", "Título Livro", "Número Chamada", "Limite data", "Situação"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelaTelaPrincipal);

        lbData.setText("                                  Data");

        lbHora.setText("        Hora");

        lbCumprimento.setText("                  Cumprimento");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Ceeteca_png_volume_2.png"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel2.setText("Relatório Geral de Empréstimos");

        jMenuBar1.setToolTipText("");

        gerenciarTelaPrincipal.setText("Gerenciar");

        usuarioTelaPrincipal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/usuario16x16.png"))); // NOI18N
        usuarioTelaPrincipal.setText("Pessoa");

        gerAlunoTelaPrincipal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/AlunoPB16x16.png"))); // NOI18N
        gerAlunoTelaPrincipal.setText("Aluno");
        gerAlunoTelaPrincipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gerAlunoTelaPrincipalActionPerformed(evt);
            }
        });
        usuarioTelaPrincipal.add(gerAlunoTelaPrincipal);

        gerBibliotecarioTelaPrincipal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/GerenciarBibliotecarioPB16x16.png"))); // NOI18N
        gerBibliotecarioTelaPrincipal.setText("Bibliotecário");
        gerBibliotecarioTelaPrincipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gerBibliotecarioTelaPrincipalActionPerformed(evt);
            }
        });
        usuarioTelaPrincipal.add(gerBibliotecarioTelaPrincipal);

        gerProfessorTelaPrincipal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gerenciarProfessorPB16x16.png"))); // NOI18N
        gerProfessorTelaPrincipal.setText("Professor");
        gerProfessorTelaPrincipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gerProfessorTelaPrincipalActionPerformed(evt);
            }
        });
        usuarioTelaPrincipal.add(gerProfessorTelaPrincipal);

        gerenciarTelaPrincipal.add(usuarioTelaPrincipal);

        gerEmprestimoTelaPrincipal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/GerenciarEmprestimoPB16x16.png"))); // NOI18N
        gerEmprestimoTelaPrincipal.setText("Empréstimo");
        gerEmprestimoTelaPrincipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gerEmprestimoTelaPrincipalActionPerformed(evt);
            }
        });
        gerenciarTelaPrincipal.add(gerEmprestimoTelaPrincipal);

        gerLivroTelaPrincipal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/LivroPB16x16.png"))); // NOI18N
        gerLivroTelaPrincipal.setText("Livro");
        gerLivroTelaPrincipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gerLivroTelaPrincipalActionPerformed(evt);
            }
        });
        gerenciarTelaPrincipal.add(gerLivroTelaPrincipal);

        jMenuBar1.add(gerenciarTelaPrincipal);

        ajudaTelaPrincipal.setText("Ajuda");

        manualTelaPrincipal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ManualPB16x16.png"))); // NOI18N
        manualTelaPrincipal.setText("Manual do Usuário");
        manualTelaPrincipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualTelaPrincipalActionPerformed(evt);
            }
        });
        ajudaTelaPrincipal.add(manualTelaPrincipal);

        sobreTelaPrincipal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/sobrePB16.x16.png"))); // NOI18N
        sobreTelaPrincipal.setText("Sobre");
        sobreTelaPrincipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sobreTelaPrincipalActionPerformed(evt);
            }
        });
        ajudaTelaPrincipal.add(sobreTelaPrincipal);

        jMenuBar1.add(ajudaTelaPrincipal);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1022, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lbCumprimento, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(228, 228, 228)
                        .addComponent(lbData, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(96, 96, 96)
                        .addComponent(lbHora, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(132, 132, 132))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(452, 452, 452)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(420, 420, 420)
                        .addComponent(jLabel2)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbData)
                    .addComponent(lbHora)
                    .addComponent(lbCumprimento))
                .addGap(43, 43, 43))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void gerEmprestimoTelaPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gerEmprestimoTelaPrincipalActionPerformed
        this.setVisible(false);
        new TelaGerenciarEmprestimo().setVisible(true);
    }//GEN-LAST:event_gerEmprestimoTelaPrincipalActionPerformed

    private void sobreTelaPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sobreTelaPrincipalActionPerformed
        // TODO add your handling code here:
        ImageIcon icon = new ImageIcon(getToolkit().createImage(getClass().getResource("/images/sobrechaoticcode.png")));
        JOptionPane.showMessageDialog(this, "", "CEETECA", JOptionPane.PLAIN_MESSAGE, icon);
    }//GEN-LAST:event_sobreTelaPrincipalActionPerformed

    private void gerLivroTelaPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gerLivroTelaPrincipalActionPerformed
        this.setVisible(false);
        new TelaGerenciarLivro().setVisible(true);
    }//GEN-LAST:event_gerLivroTelaPrincipalActionPerformed

    private void gerAlunoTelaPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gerAlunoTelaPrincipalActionPerformed
        this.setVisible(false);
        new TelaGerenciarAluno().setVisible(true);
    }//GEN-LAST:event_gerAlunoTelaPrincipalActionPerformed

    private void gerBibliotecarioTelaPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gerBibliotecarioTelaPrincipalActionPerformed
        this.setVisible(false);
        new TelaGerenciarBibliotecario().setVisible(true);
    }//GEN-LAST:event_gerBibliotecarioTelaPrincipalActionPerformed

    private void gerProfessorTelaPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gerProfessorTelaPrincipalActionPerformed
        this.setVisible(false);
        new TelaGerenciarProfessor().setVisible(true);
    }//GEN-LAST:event_gerProfessorTelaPrincipalActionPerformed

    private void manualTelaPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualTelaPrincipalActionPerformed
       
        //Esse método será utilizado para gerar o manual do usuário em pdf
        //com apenas um clique.
        
        if (Desktop.isDesktopSupported()) {
            try {
                File myFile = new File("ajuda/Manual do usuário - CEETeca.pdf");
                Desktop.getDesktop().open(myFile);
            } catch (IOException ex) {
                //no application registered for PDFs
            } catch (IllegalArgumentException ex) {
                JOptionPane.showMessageDialog(rootPane, "Arquivo não encontrado", "Erro!", 0);
            }
        }
        
        
    }//GEN-LAST:event_manualTelaPrincipalActionPerformed

    ActionListener ativar = (new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            preencherHoras();
        }
    });

    public void preencherHoras() {
        Calendar horarioAtual = Calendar.getInstance();
        lbHora.setText(formatador.format(horarioAtual.get(Calendar.HOUR_OF_DAY)) + ":" + formatador.format(horarioAtual.get(Calendar.MINUTE)) + ":" + formatador.format(horarioAtual.get(Calendar.SECOND)));

        if (horarioAtual.get(Calendar.HOUR_OF_DAY) < 12) {
            lbCumprimento.setText("Bom dia!");
        } else if (horarioAtual.get(Calendar.HOUR_OF_DAY) < 18) {
            lbCumprimento.setText("Boa Tarde!");
        } else {
            lbCumprimento.setText("Boa Noite!");
        }

        String diaSemana = "", mes = "";

        switch (horarioAtual.get(Calendar.DAY_OF_WEEK)) {

            case 1:
                diaSemana = "Domingo, ";
                break;
            case 2:
                diaSemana = "Segunda-Feira, ";
                break;
            case 3:
                diaSemana = "Terça-Feira, ";
                break;
            case 4:
                diaSemana = "Quarta-Feira, ";
                break;
            case 5:
                diaSemana = "Quinta-Feira, ";
                break;
            case 6:
                diaSemana = "Sexta-Feira, ";
                break;
            case 7:
                diaSemana = "Sábado, ";
                break;

        }

        switch (horarioAtual.get(Calendar.MONTH) + 1) {

            case 1:
                mes = " de Janeiro de ";
                break;
            case 2:
                mes = " de Fevereiro de ";
                break;
            case 3:
                mes = " de Março de ";
                break;
            case 4:
                mes = " de Abril de ";
                break;
            case 5:
                mes = " de Maio de ";
                break;
            case 6:
                mes = " de Junho de ";
                break;
            case 7:
                mes = " de Julho de ";
                break;
            case 8:
                mes = " de Agosto de ";
                break;
            case 9:
                mes = " de Setembro de ";
                break;
            case 10:
                mes = " de Outubro de ";
                break;
            case 11:
                mes = " de Novembro de ";
                break;
            case 12:
                mes = " de Dezembro de ";
                break;

        }

        lbData.setText(diaSemana + horarioAtual.get(Calendar.DAY_OF_MONTH) + mes + horarioAtual.get(Calendar.YEAR));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu ajudaTelaPrincipal;
    private javax.swing.JMenuItem gerAlunoTelaPrincipal;
    private javax.swing.JMenuItem gerBibliotecarioTelaPrincipal;
    private javax.swing.JMenuItem gerEmprestimoTelaPrincipal;
    private javax.swing.JMenuItem gerLivroTelaPrincipal;
    private javax.swing.JMenuItem gerProfessorTelaPrincipal;
    private javax.swing.JMenu gerenciarTelaPrincipal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbCumprimento;
    private javax.swing.JLabel lbData;
    private javax.swing.JLabel lbHora;
    private javax.swing.JMenuItem manualTelaPrincipal;
    private javax.swing.JMenuItem sobreTelaPrincipal;
    private javax.swing.JTable tabelaTelaPrincipal;
    private javax.swing.JMenu usuarioTelaPrincipal;
    // End of variables declaration//GEN-END:variables
}
